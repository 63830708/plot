NEXT RELEASE:

> alternating axis section backgrounds

- Refactor scatter system. User should be able to fill all scatters with a color he likes. (Make example line plot with white-filled circles and a non-white background. Looks good) 
- add QCP_CHECK_DATA_VALID define to allow checking for NaN/Inf in draw routine (probably not in setData/addData routines because there are too many)
  and find a good place to document that
- doc: duplicate QCPAbstractPlottable::rescaleAxes documentation in QCPGraph::rescaleAxes reimplementations. and make cross references between
  QCustomPlot::/QCPGraph::/QCPAbstractPlottable::rescaleAxes 
- add doc-note and qDebug output for case when addToLegend (QCPGraph/QCPAbstractPlottable) is called without the plottable being in the plot. 
- doc: explain ltDateTime mode on axes better. Probably give examples with numbers
- multiple axes per side, probably leads to complete axis system refactoring
- Experiment with better styled background, Gradients/patterns. Maybe replace setColor with setBrush or overload setColor to also accept QBrush.
- restructure tests. Have top level dir "tests" with subdir "manual", "automatic". place current "export test" and "test" into "manual".
- Ask for permission to add to http://qt-project.org/faq/answer/do_you_provide_a_tool_for_creating_graphs

FUTURE RELEASE:

- Item class based on tracer which adds tag-like labels to points. With option to show x/y values via formatting strings (%key and %value).
- optimize QCPGraph (and QCPCurve) with improved intersection clip algorithm (keep old algo for timing). QCPGraph will need clipping on left and right
  only for first and last segment due to the sorted underlying QCPDataMap. Watch out for regression for lsImpulse... (shouldn't happen since we work on raw line data)
  - increase the intersection rect by mScatterSize
  - make QCPCurve::drawScatterPlot only draw scatters that are actually in cliprect.
- unit tests
- fix selection area for bracket (doesn't adapt to length, probably need style specific algorithms)
- make demo with TeXGyreTermes axis fonts/text/arrows etc.
- make type and parent of QCPItemPosition individual for key and value, but keep interface that sets them simultaneously
- QCPItemPolygon // hide the QCPItemPosition list behind QCPItemPosition &point(i), pointCount(), setPointCount(c) interface.
- layer visibility
- maybe adjust getKeyRange on QCPGraph in sdBoth mode to actually use the sorted fashion of map (just look at first and last)
- think about how to realize splitted axes in the future
- QCPCandlesticks (http://en.wikipedia.org/wiki/Candlestick_chart)
- QCPBubbles (x, y, area)

- QCPBars value error bars, print values above bars, maybe print per bar text inside bar (rotated)
- somehow, range checks must be aware of the scale type used (if that's done, fix the validRange function for log plot 1e-300-1e300)
- provide a way to set axes ranges with 1:1 ratio (via signals/slots? review setScaleRatio)
- Data fetcher
- make drawScatterPlot more efficient
  In total, we calculate the coordToPixel transformation for the .key and .value
  three times (for polygon line, for error and for scatter). Maybe provide the
  polygon data here and make this function aware of at which increments the
  data points are positioned in the polygon (depends on line style!).
- Fix for N900 error for pen width 0 (perhaps with Q_OS_SYMBIAN flag in QCPPainter?)

- subplots, maybe as some sort of descendant of QCustomPlot, or an own widget with
  friend access to QCustomPlot (yeah, do that), which manages multiple internal QCustomPlots, so
  they don't need to know about eachother.
